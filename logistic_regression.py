# -*- coding: utf-8 -*-
"""logistic regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hcFhSxI2B2tVi84LkW3lJXfwy8yDK7zb
"""

# IMPORTING THE REQUIRED LIBRARIES
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import files
uploaded = files.upload()

uploaded.keys()

# importing dataset
default=pd.read_csv("Default_Fin.csv")
default.head()



default.shape

default.describe()

#boxplot
plt.figure(figsize=(15,5))
plt.subplot(1,2,1)
sns.boxplot(y=default["Annual Salary"])

plt.subplot(1,2,2)
sns.boxplot(y=default["Bank Balance"])
plt.show()

#countplot
plt.figure(figsize=(15,5))
plt.subplot(1,2,1)
sns.countplot(default["Employed"])

plt.subplot(1,2,2)
sns.countplot(default["Defaulted?"])
plt.show()

#value count
default["Employed"].value_counts()

default["Defaulted?"].value_counts()

# value count in the form of percentage
default["Employed"].value_counts(normalize=True)

default["Defaulted?"].value_counts(normalize=True)

"""## bivariate analysis"""

plt.figure(figsize=(15,5))
plt.subplot(1,2,1)
sns.boxplot(default["Defaulted?"],default["Annual Salary"])

plt.subplot(1,2,2)
sns.boxplot(default["Defaulted?"],default["Bank Balance"])
plt.show()

# cross tab
pd.crosstab(default["Employed"],default["Defaulted?"],normalize="index").round(2)

#heatmap to check correlation
sns.heatmap(default[["Bank Balance","Annual Salary"]].corr(),annot=True)
plt.show()

# to check null values
default.isnull().sum()

sns.boxplot(y=default["Bank Balance"])
plt.show()

q1,q2=default["Bank Balance"].quantile([0.25,0.75])

# inter quantile range
iqr=q2-q1
iqr

# lower limit
ll=q1-(1.5*iqr)
ll

# upper limit
ul=q2+(1.5*iqr)
ul

# values in database which are greater than upper limit
df=default[default["Bank Balance"]>ul]
df.head()

df["Bank Balance"].count()

#how many defaulters are from outlier
df["Defaulted?"].value_counts()

# setting valus which are greater than upper limit to the value of upper limit
default["Bank Balance"]=np.where(default["Bank Balance"]>ul,ul,default["Bank Balance"])

sns.boxplot(y=default["Bank Balance"])
plt.show()

default[default["Bank Balance"]==ul].count()

default=default.drop("Index",axis=1)

default.columns=["employed","balance","income","default"]
default.head()

#applying logistic regresion
from sklearn.model_selection import train_test_split

x=default.drop("default",axis=1)
y=default["default"]

x.head()

0x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=21,stratify=y)

print(x_train.shape)
print(y_train.shape)

print(y_train.value_counts(normalize=True).round(2))
print(" ")
print(y_test.value_counts(normalize=True).round(2))

!pip install imblearn

# SMOTE (synthetic minority over sampling technique)
import imblearn
from imblearn.over_sampling import SMOTE

sm=SMOTE(random_state=33, sampling_strategy=0.75)

x_res,y_res=sm.fit_sample(x_train,y_train)

from sklearn.linear_model import LogisticRegression

lr=LogisticRegression()

lr.fit(x_res,y_res)

y_pred=lr.predict(x_test)

from sklearn.metrics import confusion_matrix

confusion_matrix(y_test,y_pred)

#calculating accuracy
(2103+72)/(2103+797+28+72)

